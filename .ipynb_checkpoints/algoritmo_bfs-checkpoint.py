{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bd495868",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on class Grafo in module __main__:\n",
      "\n",
      "class Grafo(builtins.object)\n",
      " |  Clase Grafo, esta clase representara a un grafo juto a sus atributos y funcionalidades,\n",
      " |  \n",
      " |   Atributos\n",
      " |  ----------\n",
      " |  m_numero_nodos : int\n",
      " |      Cantidad de nodos que tendra el grafo.\n",
      " |  m_nodos : int\n",
      " |      Rango de nodos sobre los que trabajara el grafo.\n",
      " |  m_dirigido : boolean\n",
      " |      Tipo de nodo dirigido o no dirigido.\n",
      " |  m_lista_adyacencia : diccionario\n",
      " |      Diccionario que almacena el valor de los nodos\n",
      " |      \n",
      " |      \n",
      " |   Métodos\n",
      " |  ----------\n",
      " |  \n",
      " |  __init__(self, num_de_nodos, dirigido=True)\n",
      " |      Este metodo funcionara como el constuctor de la clase Grafo(), recibe el Numero de nodos (m_num_nodos),\n",
      " |      crea el rango de nodos (numero_nodos), determina el tipo de grafo si es dirigido o no dirigido (m_dirigido) y\n",
      " |      creara el diccionario de la lista de adyacencia.\n",
      " |  \n",
      " |  agregar_borde(self, nodo1, nodo2, peso=1)\n",
      " |      Genera los bordes de la lista de adyacencia agregando el nodo 2 a la lista de adyacencia del nodo 1.\n",
      " |      \n",
      " |  Imprimir_lista_adyacencia(self)\n",
      " |      Imprime el grafo generado en base a la lista de adyacencia.\n",
      " |      \n",
      " |  bfs_transversal(self, nodo_de_inicio)\n",
      " |      Función que imprime el recorrido BFS de un vértice fuente dado. bfs_traversal(int s) \n",
      " |      recorre los vértices alcanzables desde s.\n",
      " |  \n",
      " |  Data descriptors defined here:\n",
      " |  \n",
      " |  __dict__\n",
      " |      dictionary for instance variables (if defined)\n",
      " |  \n",
      " |  __weakref__\n",
      " |      list of weak references to the object (if defined)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Importamos la libreria Queue\n",
    "from queue import Queue\n",
    "\n",
    "class Grafo():\n",
    "    '''\n",
    "    Clase Grafo, esta clase representara a un grafo juto a sus atributos y funcionalidades,\n",
    "    \n",
    "     Atributos\n",
    "    ----------\n",
    "    m_numero_nodos : int\n",
    "        Cantidad de nodos que tendra el grafo.\n",
    "    m_nodos : int\n",
    "        Rango de nodos sobre los que trabajara el grafo.\n",
    "    m_dirigido : boolean\n",
    "        Tipo de nodo dirigido o no dirigido.\n",
    "    m_lista_adyacencia : diccionario\n",
    "        Diccionario que almacena el valor de los nodos\n",
    "        \n",
    "        \n",
    "     Métodos\n",
    "    ----------\n",
    "  \n",
    "    __init__(self, num_de_nodos, dirigido=True)\n",
    "        Este metodo funcionara como el constuctor de la clase Grafo(), recibe el Numero de nodos (m_num_nodos),\n",
    "        crea el rango de nodos (numero_nodos), determina el tipo de grafo si es dirigido o no dirigido (m_dirigido) y\n",
    "        creara el diccionario de la lista de adyacencia.\n",
    "    \n",
    "    agregar_borde(self, nodo1, nodo2, peso=1)\n",
    "        Genera los bordes de la lista de adyacencia agregando el nodo 2 a la lista de adyacencia del nodo 1.\n",
    "        \n",
    "    Imprimir_lista_adyacencia(self)\n",
    "        Imprime el grafo generado en base a la lista de adyacencia.\n",
    "        \n",
    "    bfs_transversal(self, nodo_de_inicio)\n",
    "        Función que imprime el recorrido BFS de un vértice fuente dado. bfs_traversal(int s) \n",
    "        recorre los vértices alcanzables desde s.\n",
    "    '''\n",
    "    \n",
    "    def __init__(self, numero_nodos, dirigido=True):\n",
    "\n",
    "        '''Este metodo funcionara como el constuctor de la clase Grafo(), recibe el Numero de nodos (m_num_nodos),\n",
    "        crea el rango de nodos (numero_nodos), determina el tipo de grafo si es dirigido o no dirigido (m_dirigido) y\n",
    "        creara el diccionario de la lista de adyacencia.\n",
    "        \n",
    "        \n",
    "        Parametros\n",
    "        ----------\n",
    "        m_numero_nodos : int\n",
    "            Cantidad de nodos que tendra el grafo.\n",
    "        m_nodos : int\n",
    "            Rango de nodos sobre los que trabajara el grafo.\n",
    "        m_dirigido : boolean\n",
    "            Tipo de nodo dirigido o no dirigido.\n",
    "        m_lista_adyacencia : diccionario\n",
    "            Diccionario que almacena el valor de los nodos\n",
    "        '''\n",
    "        self.m_numero_nodos = numero_nodos\n",
    "        self.m_nodos = range(self.m_numero_nodos)\n",
    "        self.m_dirigido = dirigido\n",
    "        self.m_lista_adyacencia = {nodo: set() for nodo in self.m_nodos}\n",
    "\n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b91de22",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
